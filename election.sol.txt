 pragma solidity ^0.4.10;

contract Election {
    string go1 = "Candidate 1 is the winner";
    string go2 = "Candidate 2 is the winner";
    string go3 = "Both have equal votes";
    struct Candidate {
        string name;
        uint voteCount;
       
    }
   
    struct Voter {
        bool voted;
        uint voteIndex;
        uint Weight;
    }
    address public owner;
    string public name;
    mapping (address=>Voter) public voters;
    Candidate [] public candidates;
    uint public auctionEnd;
   
    event ElectionResult (string name, uint voteCount);
   
    function Election(string _name,uint durationMinutes,string candidate1,string candidate2){
       
   
    owner = msg.sender;
    name = _name;
    auctionEnd = now + (durationMinutes * 1 minutes);
   
   

    candidates.push(Candidate(candidate1,0));
    candidates.push(Candidate(candidate2,0));
   
}
    function authorize(address voter) public  {
        require(msg.sender == owner);
        require(!voters[voter].voted);
       
        voters[voter].Weight = 1;
    }  
    function vote (uint voteIndex) {
        require(now < auctionEnd);
        require(!voters[msg.sender].voted);
   
        voters[msg.sender].voted = true;
        voters[msg.sender].voteIndex = voteIndex;
       
        candidates[voteIndex].voteCount += voters[msg.sender].Weight;
    }
   
    function end() {
        require(msg.sender == owner);
        require(now >= auctionEnd);
       
        for (uint i=0; i < candidates.length;i++) {
                ElectionResult(candidates[i].name,candidates[i].voteCount);
        }
    }
    function win() public  returns(string) {
        if(candidates[0].voteCount > candidates[1].voteCount) {
            return go1;
        }
       
        if(candidates[0].voteCount < candidates[1].voteCount) {
            return go2;
        }
       
        else {
            return go3;
        }
    }
    }
